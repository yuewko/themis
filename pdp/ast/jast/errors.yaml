package: jast

import:
- encoding/json
- fmt
- strings
- "github.com/infobloxopen/themis/pdp"

errors:
- id: externalError
  fields:
  - id: err
    type: error
  msg: "%s"
  args:
  - field: err

- id: attributeTypeError
  fields:
  - id: t
    type: string
  msg: "Expected attribute data type but got \"%s\""
  args:
  - field: t

- id: policyAmbiguityError
  msg: "Expected rules (for policy) or policies (for policy set) but got both"

- id: policyMissingKeyError
  msg: "Expected rules (for policy) or policies (for policy set) but got nothing"

- id: unknownRCAError
  fields:
  - id: alg
    type: string
  msg: "Unknown rule combinig algorithm \"%s\""
  args:
  - field: alg

- id: missingRCAError
  msg: "Missing policy combinig algorithm"

- id: parseCAError
  fields:
  - id: token
    type: json.Token
  msg: "Expected string or { object delimiter for combinig algorithm but got %T (%#v)"
  args:
  - field: token
  - field: token

- id: invalidRCAError
  fields:
  - id: v
    type: interface{}
  msg: "Expected string or *caParams as policy combinig algorithm but got %T"
  args:
  - field: v

- id: missingDefaultRuleRCAError
  fields:
  - id: ID
    type: string
  msg: "No rule with ID %q to use as default rule"
  args:
  - field: ID

- id: missingErrorRuleRCAError
  fields:
  - id: ID
    type: string
  msg: "No rule with ID %q to use as on error rule"
  args:
  - field: ID

- id: notImplementedRCAError
  fields:
  - id: ID
    type: string
  msg: "Parsing for %q rule combinig algorithm hasn't been implemented yet"
  args:
  - field: ID

- id: unknownPCAError
  fields:
  - id: alg
    type: string
  msg: "Unknown policy combinig algorithm \"%s\""
  args:
  - field: alg

- id: missingPCAError
  msg: "Missing policy combinig algorithm"

- id: invalidPCAError
  fields:
  - id: v
    type: interface{}
  msg: "Expected string or *caParams as policy combinig algorithm but got %T"
  args:
  - field: v

- id: missingDefaultPolicyPCAError
  fields:
  - id: ID
    type: string
  msg: "No policy with ID %q to use as default policy"
  args:
  - field: ID

- id: missingErrorPolicyPCAError
  fields:
  - id: ID
    type: string
  msg: "No policy with ID %q to use as on error policy"
  args:
  - field: ID

- id: notImplementedPCAError
  fields:
  - id: ID
    type: string
  msg: "Parsing for %q policy combinig algorithm hasn't been implemented yet"
  args:
  - field: ID

- id: mapperArgumentTypeError
  fields:
  - id: actual
    type: int
  msg: "Expected %s, %s or %s as argument but got %s"
  args:
  - expr: pdp.TypeNames[pdp.TypeString]
  - expr: pdp.TypeNames[pdp.TypeSetOfStrings]
  - expr: pdp.TypeNames[pdp.TypeListOfStrings]
  - expr: pdp.TypeNames[e.actual]

- id: conditionTypeError
  fields:
  - id: t
    type: int
  msg: "Expected %q as condition expression result but got %q"
  args:
  - expr: pdp.TypeNames[pdp.TypeBoolean]
  - expr: pdp.TypeNames[e.t]

- id: unknownEffectError
  fields:
  - id: e
    type: string
  msg: "Unknown rule effect %q"
  args:
  - field: e

- id: unknownMatchFunctionError
  fields:
  - id: ID
    type: string
  msg: "Unknown match function %q"
  args:
  - field: ID

- id: matchFunctionCastError
  fields:
  - id: ID
    type: string
  - id: first
    type: int
  - id: second
    type: int
  msg: "No function %s for arguments %s and %s"
  args:
  - field: ID
  - expr: pdp.TypeNames[e.first]
  - expr: pdp.TypeNames[e.second]

- id: matchFunctionArgsNumberError
  fields:
  - id: n
    type: int
  msg: "Expected two arguments got %d"
  args:
  - field: n

- id: invalidMatchFunctionArgError
  fields:
  - id: expr
    type: pdp.Expression
  msg: "Expected one immediate value and one attribute got %T"
  args:
  - field: expr

- id: matchFunctionBothValuesError
  msg: "Expected one immediate value and one attribute got both immediate values"

- id: matchFunctionBothAttrsError
  msg: "Expected one immediate value and one attribute got both immediate values"

- id: unknownFunctionError
  fields:
  - id: ID
    type: string
  msg: "Unknown function %q"
  args:
  - field: ID

- id: functionCastError
  fields:
  - id: ID
    type: string
  - id: exprs
    type: "[]pdp.Expression"
  msg: "Can't find function %s which takes %s"
  args:
  - field: ID
  - snippet:
      result: args
      code: |
        args := ""
        if len(e.exprs) > 1 {
          t := make([]string, len(e.exprs))
          for i, e := range e.exprs {
            t[i] = pdp.TypeNames[e.GetResultType()]
          }
          args = fmt.Sprintf("%d arguments of following types \"%s\"", len(e.exprs), strings.Join(t, "\", \""))
        } else if len(e.exprs) > 0 {
          args = fmt.Sprintf("argument of type \"%s\"", pdp.TypeNames[e.exprs[0].GetResultType()])
        } else {
                args = "no arguments"
        }

- id: unknownAttributeError
  fields:
  - id: ID
    type: string
  msg: "Unknown attribute %q"
  args:
  - field: ID

- id: missingAttributeError
  fields:
  - id: attr
    type: string
  - id: obj
    type: string
  msg: "Missing %q attribute %q"
  args:
  - field: obj
  - field: attr

- id: unknownMapperCAOrder
  fields:
  - id: ord
    type: string
  msg: "Unknown ordering for mapper \"%s\""
  args:
  - field: ord

- id: unknownTypeError
  fields:
  - id: t
    type: string
  msg: "Unknown value type %q"
  args:
  - field: t

- id: invalidTypeError
  fields:
  - id: t
    type: int
  msg: "Can't make value of %q type"
  args:
  - expr: pdp.TypeNames[e.t]

- id: missingContentError
  msg: "Missing value content"

- id: notImplementedValueTypeError
  fields:
  - id: t
    type: int
  msg: "Parsing for type %s hasn't been implemented yet"
  args:
  - expr: pdp.TypeNames[e.t]

- id: invalidAddressError
  fields:
  - id: s
    type: string
  msg: "Expected value of address type but got %q"
  args:
  - field: s

- id: integerOverflowError
  fields:
  - id: x
    type: float64
  msg: "%f overflows integer"
  args:
  - field: x

- id: invalidNetworkError
  fields:
  - id: s
    type: string
  - id: err
    type: error
  msg: "Expected value of network type but got %q (%v)"
  args:
  - field: s
  - field: err

- id: invalidDomainError
  fields:
  - id: s
    type: string
  - id: err
    type: error
  msg: "Expected value of domain type but got %q (%v)"
  args:
  - field: s
  - field: err

- id: selectorURIError
  fields:
  - id: uri
    type: string
  - id: err
    type: error
  msg: "Expected seletor URI but got %q (%s)"
  args:
  - field: uri
  - field: err

- id: selectorLocationError
  fields:
  - id: loc
    type: string
  - id: uri
    type: string
  msg: "Expected selector location in form of <Content-ID>/<Item-ID> got %q (%s)"
  args:
  - field: loc
  - field: uri

- id: unsupportedSelectorSchemeError
  fields:
  - id: scheme
    type: string
  - id: uri
    type: string
  msg: "Unsupported selector scheme %q (%s)"
  args:
  - field: scheme
  - field: uri

- id: entityAmbiguityError
  fields:
  - id: fields
    type: "[]string"
  msg: "Expected rules (for policy), policies (for policy set) or effect (for rule) but got %s"
  args:
  - expr: strings.Join(e.fields, ", ")

- id: entityMissingKeyError
  msg: "Expected rules (for policy), policies (for policy set) or effect (for rule) but got nothing"

- id: unknownPolicyUpdateOperationError
  fields:
  - id: op
    type: string
  msg: "Unknown policy update operation %q"
  args:
  - field: op

- id: missingContentTypeError
  msg: "Value 'type' attribute is missing or placed after 'content' attribute"
